@page "/"
@rendermode InteractiveServer

<script type="text/javascript" src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

<h3>電卓</h3>

<div class="calculator">

	<!-- 表示エリア：計算式と結果 -->
	<div class="display-header">
		<span class="formula-label">計算式: @CalculatorFormula()</span>
		<span class="result-label">@ans</span>
	</div>

	<br><br><br>

	<!-- 上段：削除ボタン -->
	<div class="deleteContainer">
		<button class="btn btn-primary customButton deleteButton" @onclick="CalculatorStart">全削除</button>
	</div>
	<div class="deleteContainer">
		<button class="btn btn-primary customButton deleteButton" @onclick="CalculatorDel">削除</button>
	</div>
	<!-- 中段: 1 2 3 ＋ -->
	<div class="rowContainer">
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(1)">1</button>
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(2)">2</button>
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(3)">3</button>
		<button class="btn btn-primary customButton" @onclick='() => CalculatorOpe("+")'>＋</button>
	</div>
	<!-- 中段: 4 5 6 - -->
	<div class="rowContainer">
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(4)">4</button>
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(5)">5</button>
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(6)">6</button>
		<button class="btn btn-primary customButton" @onclick='() => CalculatorOpe("-")'>-</button>
	</div>
	<!-- 中段: 7 8 9 * -->
	<div class="rowContainer">
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(7)">7</button>
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(8)">8</button>
		<button class="btn btn-primary customButton" @onclick="() => CalculatorCount(9)">9</button>
		<button class="btn btn-primary customButton" @onclick='() => CalculatorOpe("*")'>*</button>
	</div>
	<!-- 下段: 0 実行 + ー -->
	<div class="rowContainer">
		<button class="btn btn-primary customButton" @onclick="()=>CalculatorCount(0)">0</button>
		<button class="btn btn-primary customButton" @onclick='() => DecimalPoint()'>.</button>
		<button class="btn btn-primary customButton" @onclick="CalculatorCal">実行</button>
		<button class='btn btn-primary customButton' @onclick='() => CalculatorOpe("/")'>/</button>
	</div>
</div>



@code {
	private string[] num = { "", "" };  //入力値
	private string[] sign = { "", "" }; //符号
	private int index = 0;              //左辺:0 右辺:1
	private string ans = "結果：";     //結果
	private string ope = "";            //演算子


	//数式をリセットする
	private void CalculatorStart()
	{
		index = 0;
		num[0] = "";
		num[1] = "";
		sign[0] = "";
		sign[1] = "";
		ans = "結果：";
		ope = "";
	}

	//数値を加える
	private void CalculatorCount(int value)
	{
		if (num[index] == "")
		{
			num[index] = value.ToString();
		}
		else if (!CheckOverFlor((double.Parse(num[index]) * 10) + (double)value))
		{
			num[index] += value.ToString();
		}
	}

	//数値を消す
	private void CalculatorDel()
	{
		if (index == 0)
		{
			if (num[index].Length > 0) { num[index] = num[index].Remove(num[index].Length - 1); }
		}
		else if (index == 1)
		{
			if (num[1].Length == 0)
			{
				ope = "";
				index = 0;
			}
			else
			{
				if (num[1].Length > 0) { num[1] = num[1].Remove(num[1].Length - 1); }
			}
		}
	}

	//演算子を設定して、地点を右辺にする
	private void CalculatorOpe(string str)
	{
		if (num[0] == "" && str == "-")         //左辺にマイナスを付ける
		{
			sign[0] = "-";
		}
		else if (ans == "結果：" && ope == "")  //演算子をセット
		{
			ope = str;
			index = 1;
		}
		else if (num[1] == "" && str == "-")	//右辺にマイナスを付ける
		{
			sign[1] = "-";
		}
		else　if(ans !="結果：")				//計算結果を元に計算
		{
			num[0] = ans.Replace("結果：", "");
			num[1] = "";
			sign[1] = "";
			ope = str;
		}
	}

	//マイナス演算子の処理
	private void CalculatorMinus()
	{
		if (num[0] == "")
		{
			sign[0] = "-";
		}
		else if (ope == "")
		{
			ope = "-";
			index = 1;
		}
		else if (num[1] == "" && ope != "-")
		{
			sign[1] = "-";
		}
	}

	//小数点
	private void DecimalPoint()
	{
		num[index] += ".";
	}

	//実行ボタン
	private void CalculatorCal()
	{
		if (num[1] == "") { return; }
		//指定されている演算子ごとに、オーバーフローチェックをして結果を代入。
		if (ope == "+")
		{
			if (CheckOverFlor(double.Parse(num[0]) + double.Parse(num[1]))) { ans = "結果：計算範囲外です。"; }
			else { ans = "結果：" + (double.Parse(sign[0] + num[0]) + double.Parse(sign[1] + num[1])).ToString(); }
		}
		else if (ope == "-")
		{
			if (CheckOverFlor(double.Parse(num[0]) - double.Parse(num[1]))) { ans = "結果：計算範囲外です。"; }
			else { ans = "結果：" + (double.Parse(sign[0] + num[0]) - double.Parse(sign[1] + num[1])).ToString(); }
		}
		else if (ope == "*")
		{
			if (CheckOverFlor(double.Parse(num[0]) * double.Parse(num[1]))) { ans = "結果：計算範囲外です。"; }
			else { ans = "結果：" + (double.Parse(sign[0] + num[0]) * double.Parse(sign[1] + num[1])).ToString(); }
		}
		else if (ope == "/")
		{
			if (double.Parse(num[1]) == 0) { ans = "0で割ることは出来ません。"; } //0除算禁止
			else if (CheckOverFlor(double.Parse(num[0]) / double.Parse(num[1]))) { ans = "結果：計算範囲外です。"; }
			else { ans = "結果：" + (double.Parse(sign[0] + num[0]) / double.Parse(sign[1] + num[1])).ToString(); }
		}
	}

	//式表示
	private string CalculatorFormula()
	{
		//if (ans == "結果：")
		//{
		string formula = "";
		formula += sign[0];
		formula += num[0];
		formula += ope;
		formula += sign[1];
		formula += num[1];
		return formula;
		//}
		//else
		//{
		//	return "";
		//}
	}

	//オーバーフローチェック
	private bool CheckOverFlor(double number)
	{
		//オーバーフローならtrue、範囲内ならfalse
		if (number >= double.MinValue && number <= double.MaxValue) { return false; }
		else { return true; }
	}
}
